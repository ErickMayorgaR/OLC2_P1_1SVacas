
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initleftMASMENOSleftPORDIVleftPARIPARDrightUMENOSANY BOOLEAN CADENA DECIMAL DIV DPUNTOS ENTERO ID IGUAL LLAVEDER LLAVEIZQ MAS MENOS NUMBER PARD PARI POR PTCOMA PUNTO RCONSOLE RELSE RFALSE RIF RLET RLOG RTRUE STRINGinit : instruccionesinstrucciones    : instrucciones instruccioninstrucciones : instruccioninstruccion : imprimir PTCOMA\n                    | declaracion_normal PTCOMA\n                    | condicional_if PTCOMAimprimir : RCONSOLE PUNTO RLOG PARI expresion PARDdeclaracion_normal : RLET ID DPUNTOS tipo IGUAL expresioncondicional_if : RIF PARI expresion PARD LLAVEIZQ LLAVEDERtipo : STRING\n            | NUMBER\n            | BOOLEANexpresion : expresion MAS expresion\n                | expresion MENOS expresion\n                | expresion POR expresion\n                | expresion DIV expresionexpresion : MENOS expresion %prec UMENOSexpresion : ENTEROexpresion : DECIMALexpresion : CADENAexpresion : RTRUE\n                | RFALSE'
    
_lr_action_items = {'RCONSOLE':([0,2,3,10,11,12,13,],[7,7,-3,-2,-4,-5,-6,]),'RLET':([0,2,3,10,11,12,13,],[8,8,-3,-2,-4,-5,-6,]),'RIF':([0,2,3,10,11,12,13,],[9,9,-3,-2,-4,-5,-6,]),'$end':([1,2,3,10,11,12,13,],[0,-1,-3,-2,-4,-5,-6,]),'PTCOMA':([4,5,6,21,22,23,24,25,36,40,41,42,43,44,45,46,],[11,12,13,-18,-19,-20,-21,-22,-17,-13,-14,-15,-16,-7,-8,-9,]),'PUNTO':([7,],[14,]),'ID':([8,],[15,]),'PARI':([9,17,],[16,26,]),'RLOG':([14,],[17,]),'DPUNTOS':([15,],[18,]),'MENOS':([16,19,20,21,22,23,24,25,26,32,33,34,35,36,37,38,40,41,42,43,45,],[20,33,20,-18,-19,-20,-21,-22,20,20,20,20,20,-17,33,20,-13,-14,-15,-16,33,]),'ENTERO':([16,20,26,32,33,34,35,38,],[21,21,21,21,21,21,21,21,]),'DECIMAL':([16,20,26,32,33,34,35,38,],[22,22,22,22,22,22,22,22,]),'CADENA':([16,20,26,32,33,34,35,38,],[23,23,23,23,23,23,23,23,]),'RTRUE':([16,20,26,32,33,34,35,38,],[24,24,24,24,24,24,24,24,]),'RFALSE':([16,20,26,32,33,34,35,38,],[25,25,25,25,25,25,25,25,]),'STRING':([18,],[28,]),'NUMBER':([18,],[29,]),'BOOLEAN':([18,],[30,]),'PARD':([19,21,22,23,24,25,36,37,40,41,42,43,],[31,-18,-19,-20,-21,-22,-17,44,-13,-14,-15,-16,]),'MAS':([19,21,22,23,24,25,36,37,40,41,42,43,45,],[32,-18,-19,-20,-21,-22,-17,32,-13,-14,-15,-16,32,]),'POR':([19,21,22,23,24,25,36,37,40,41,42,43,45,],[34,-18,-19,-20,-21,-22,-17,34,34,34,-15,-16,34,]),'DIV':([19,21,22,23,24,25,36,37,40,41,42,43,45,],[35,-18,-19,-20,-21,-22,-17,35,35,35,-15,-16,35,]),'IGUAL':([27,28,29,30,],[38,-10,-11,-12,]),'LLAVEIZQ':([31,],[39,]),'LLAVEDER':([39,],[46,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,],[2,]),'instruccion':([0,2,],[3,10,]),'imprimir':([0,2,],[4,4,]),'declaracion_normal':([0,2,],[5,5,]),'condicional_if':([0,2,],[6,6,]),'expresion':([16,20,26,32,33,34,35,38,],[19,36,37,40,41,42,43,45,]),'tipo':([18,],[27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_inicio','Analizador_Sintactico.py',24),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','Analizador_Sintactico.py',29),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_2','Analizador_Sintactico.py',35),
  ('instruccion -> imprimir PTCOMA','instruccion',2,'p_instrucciones_evaluar','Analizador_Sintactico.py',43),
  ('instruccion -> declaracion_normal PTCOMA','instruccion',2,'p_instrucciones_evaluar','Analizador_Sintactico.py',44),
  ('instruccion -> condicional_if PTCOMA','instruccion',2,'p_instrucciones_evaluar','Analizador_Sintactico.py',45),
  ('imprimir -> RCONSOLE PUNTO RLOG PARI expresion PARD','imprimir',6,'p_imprimir','Analizador_Sintactico.py',50),
  ('declaracion_normal -> RLET ID DPUNTOS tipo IGUAL expresion','declaracion_normal',6,'p_declaracion_normal','Analizador_Sintactico.py',56),
  ('condicional_if -> RIF PARI expresion PARD LLAVEIZQ LLAVEDER','condicional_if',6,'p_condicional_if','Analizador_Sintactico.py',63),
  ('tipo -> STRING','tipo',1,'p_tipo','Analizador_Sintactico.py',70),
  ('tipo -> NUMBER','tipo',1,'p_tipo','Analizador_Sintactico.py',71),
  ('tipo -> BOOLEAN','tipo',1,'p_tipo','Analizador_Sintactico.py',72),
  ('expresion -> expresion MAS expresion','expresion',3,'p_expresion_binaria','Analizador_Sintactico.py',78),
  ('expresion -> expresion MENOS expresion','expresion',3,'p_expresion_binaria','Analizador_Sintactico.py',79),
  ('expresion -> expresion POR expresion','expresion',3,'p_expresion_binaria','Analizador_Sintactico.py',80),
  ('expresion -> expresion DIV expresion','expresion',3,'p_expresion_binaria','Analizador_Sintactico.py',81),
  ('expresion -> MENOS expresion','expresion',2,'p_expresion_unaria','Analizador_Sintactico.py',92),
  ('expresion -> ENTERO','expresion',1,'p_expresion_entero','Analizador_Sintactico.py',96),
  ('expresion -> DECIMAL','expresion',1,'p_expresion_decimal','Analizador_Sintactico.py',100),
  ('expresion -> CADENA','expresion',1,'p_expresion_cadena','Analizador_Sintactico.py',104),
  ('expresion -> RTRUE','expresion',1,'p_expresion_boolean','Analizador_Sintactico.py',108),
  ('expresion -> RFALSE','expresion',1,'p_expresion_boolean','Analizador_Sintactico.py',109),
]
